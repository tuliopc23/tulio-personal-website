---
import BrandIcon from "../components/BrandIcon.astro";
import ScrollToTop from "../components/ScrollToTop.astro";
import SFIcon from "../components/SFIcon.astro";
import PhosphorIcon from "../components/PhosphorIcon.astro";
import PersonalIcon from "../components/PersonalIcon.astro";
import LiquidThemeToggle from "../components/LiquidThemeToggle.astro";
import motionCssHref from "../styles/motion.css?url";
import themeCssHref from "../styles/theme.css?url";

interface OgImageMeta {
  url: string;
  alt?: string | null;
  width?: number;
  height?: number;
}

interface BaseProps {
  title?: string;
  description?: string;
  canonical?: string;
  ogTitle?: string;
  ogDescription?: string;
  ogType?: string;
  ogImage?: OgImageMeta | null;
  noIndex?: boolean;
  structuredData?: Record<string, unknown> | string | null;
  sidebar?: boolean;
}

const {
  title = "Home",
  description,
  canonical,
  ogTitle,
  ogDescription,
  ogType = "website",
  ogImage,
  noIndex = false,
  structuredData,
  sidebar = true,
} = Astro.props as BaseProps;

const fullTitle = `${title} â€¢ Tulio Cunha`;
const computedOgTitle = ogTitle ?? fullTitle;
const computedOgDescription = ogDescription ?? description;
const canonicalUrl = canonical ?? (typeof Astro.url !== "undefined" ? Astro.url.href : undefined);
const robotsValue = noIndex ? "noindex,nofollow" : "index,follow";
const structuredDataJson =
  typeof structuredData === "string"
    ? structuredData
    : structuredData
      ? JSON.stringify(structuredData)
      : null;
---

<html lang="en" data-theme="dark">
  <head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <title>{fullTitle}</title>
    <meta name="robots" content={robotsValue} />
    {description && <meta name="description" content={description} />}
    {canonicalUrl && <link rel="canonical" href={canonicalUrl} />}

    <!-- Theme-aware favicons -->
    <link
      rel="icon"
      type="image/svg+xml"
      href="/favicon-dark.svg"
      media="(prefers-color-scheme: dark)"
    />
    <link
      rel="icon"
      type="image/svg+xml"
      href="/favicon-light.svg"
      media="(prefers-color-scheme: light)"
    />
    <link rel="icon" type="image/svg+xml" href="/favicon-dark.svg" />

    <!-- Performance: Resource hints for external domains -->
    <link rel="dns-prefetch" href="https://cdn.sanity.io" />
    <link rel="preconnect" href="https://cdn.sanity.io" crossorigin />

    <!-- CDN Fonts: SF Pro Display, SF UI Text, SF Mono -->
    <link rel="preconnect" href="//fdn.fontcdn.ir" />
    <link rel="preconnect" href="//v1.fontapi.ir" />
    <link href="https://v1.fontapi.ir/css/SFProDisplay" rel="stylesheet" />
    <link href="https://v1.fontapi.ir/css/SFUIText" rel="stylesheet" />
    <link href="https://v1.fontapi.ir/css/SFMono" rel="stylesheet" />

    <!-- Theme script must run BEFORE CSS to prevent FOUC -->
    <script is:inline>
      (() => {
        const readStoredTheme = () => {
          try {
            const value = localStorage.getItem("theme");
            return value === "light" || value === "dark" ? value : null;
          } catch {
            return null;
          }
        };

        const stored = readStoredTheme();
        const root = document.documentElement;

        // If user has explicitly chosen a theme, use it
        if (stored === "light" || stored === "dark") {
          root.setAttribute("data-theme", stored);
          // Add class for Shiki code block theme switching
          if (stored === "light") {
            root.classList.remove("dark");
            root.classList.add("light");
          } else {
            root.classList.remove("light");
            root.classList.add("dark");
          }
        } else {
          // Default is dark, add the class
          root.classList.add("dark");
        }
        // Otherwise, respect the HTML's initial data-theme attribute (defaults to dark)
        // No need to set it again as it's already in the HTML

        // Update favicon based on theme
        const updateFavicon = (theme) => {
          const favicon = document.querySelector('link[rel="icon"]');
          if (favicon) {
            favicon.href = theme === "light" ? "/favicon-light.svg" : "/favicon-dark.svg";
          }
        };

        // Set initial favicon
        updateFavicon(stored || "dark");
      })();
    </script>

    <link rel="stylesheet" href={themeCssHref} />
    <link rel="stylesheet" href={motionCssHref} />
    <meta property="og:type" content={ogType} />
    <meta property="og:title" content={computedOgTitle} />
    {
      computedOgDescription && (
        <meta property="og:description" content={computedOgDescription} />
      )
    }
    {canonicalUrl && <meta property="og:url" content={canonicalUrl} />}
    {ogImage?.url && <meta property="og:image" content={ogImage.url} />}
    {ogImage?.alt && <meta property="og:image:alt" content={ogImage.alt} />}
    {
      typeof ogImage?.width === "number" && (
        <meta property="og:image:width" content={String(ogImage.width)} />
      )
    }
    {
      typeof ogImage?.height === "number" && (
        <meta property="og:image:height" content={String(ogImage.height)} />
      )
    }
    <meta
      name="twitter:card"
      content={ogImage?.url ? "summary_large_image" : "summary"}
    />
    <meta name="twitter:title" content={computedOgTitle} />
    {
      computedOgDescription && (
        <meta name="twitter:description" content={computedOgDescription} />
      )
    }
    {ogImage?.url && <meta name="twitter:image" content={ogImage.url} />}
    {
      structuredDataJson && (
        <script type="application/ld+json" set:html={structuredDataJson} />
      )
    }

    <!-- Performance: Web Vitals monitoring (dev only) -->
    <script src="../scripts/web-vitals.ts" async></script>

    <slot name="head" />
  </head>
  <body data-page-state="entering" data-glass-state="rest">
    <a href="#main" class="sr-only">Skip to content</a>
    <header class="topbar">
      <div class="topbar__inner">
        <div class="topbar__brandGroup">
          <button
            type="button"
            class="topbar__menu"
            aria-label="Toggle sidebar"
            aria-expanded="false"
            aria-controls={sidebar ? "site-sidebar" : undefined}
          >
            <SFIcon name="sidebar-left" size={22} stroke={1.4} />
          </button>
          <PersonalIcon size={32} class="topbar__brandIcon" />
          <div class="topbar__brand">
            <span class="topbar__brandName">Tulio Cunha</span>
            <span class="topbar__brandSubtitle">Full Stack Developer</span>
          </div>
        </div>
        <nav class="topbar__nav" aria-label="Global">
          <div
            class="topbar__navMask"
            data-topbar-mask
            data-edge-start="true"
            data-edge-end="true"
          >
            <ul class="topbar__navList" data-topbar-list>
              <li class="topbar__navItem">
                <a
                  href="/"
                  class="topbar__navLink"
                  aria-current={Astro.url.pathname === "/" ? "page" : undefined}
                >
                  <span class="topbar__navLabel">Home</span>
                </a>
              </li>
              <li class="topbar__navItem">
                <a
                  href="/blog/"
                  class="topbar__navLink"
                  aria-current={Astro.url.pathname.startsWith("/blog")
                    ? "page"
                    : undefined}
                >
                  <span class="topbar__navLabel">Blog</span>
                </a>
              </li>
              <li class="topbar__navItem">
                <a
                  href="/projects"
                  class="topbar__navLink"
                  aria-current={Astro.url.pathname === "/projects" ? "page" : undefined}
                >
                  <span class="topbar__navLabel">Projects</span>
                </a>
              </li>
            </ul>
          </div>
        </nav>
        <div class="topbar__actions">
          <LiquidThemeToggle />
        </div>
      </div>
    </header>

    <main class="layout">
      {
        sidebar && (
          <aside id="site-sidebar" class="sidebar" aria-label="Sidebar">
            <div class="sidebar__inner">
              <div class="sidebar__dragHandle" aria-hidden="true" />
              <div class="sidebar__header">Navigation</div>
              <nav class="sidebar__nav" role="navigation" aria-label="Sections">
                <div class="sidebar__group sidebar__group--site">
                  <div class="sidebar__groupLabel">Site</div>
                  <a
                    class="sidebar__link"
                    href="/"
                    aria-current={Astro.url.pathname === "/" ? "page" : undefined}
                  >
                    <span class="icon-tile icon-tile--indigo" aria-hidden="true">
                      <SFIcon name="house" size={20} stroke={1.4} />
                    </span>
                    Home
                  </a>
                  <a
                    class="sidebar__link"
                    href="/blog/"
                    aria-current={
                      Astro.url.pathname.startsWith("/blog") ? "page" : undefined
                    }
                  >
                    <span class="icon-tile icon-tile--blue" aria-hidden="true">
                      <SFIcon name="notebook" size={20} stroke={1.4} />
                    </span>
                    Blog
                  </a>
                  <a
                    class="sidebar__link"
                    href="/projects"
                    aria-current={Astro.url.pathname === "/projects" ? "page" : undefined}
                  >
                    <span class="icon-tile icon-tile--orange" aria-hidden="true">
                      <SFIcon name="briefcase" size={20} stroke={1.4} />
                    </span>
                    Projects
                  </a>
                </div>
                <div class="sidebar__group sidebar__group--social">
                  <div class="sidebar__groupLabel">Social</div>
                  <a
                    class="sidebar__link"
                    href="https://github.com/tuliopc23"
                    target="_blank"
                    rel="noreferrer noopener"
                  >
                    <span class="icon-tile icon-tile--indigo" aria-hidden="true">
                      <PhosphorIcon name="github" size={22} weight="regular" />
                    </span>
                    GitHub
                  </a>
                  <a
                    class="sidebar__link"
                    href="https://instagram.com/tuliopinheirocunha"
                    target="_blank"
                    rel="noreferrer noopener"
                  >
                    <span class="icon-tile" aria-hidden="true">
                      <BrandIcon name="instagram" size={22} />
                    </span>
                    Instagram
                  </a>
                  <a class="sidebar__link" href="mailto:contact@tuliocunha.dev">
                    <span class="icon-tile" aria-hidden="true">
                      <SFIcon name="mail" size={22} stroke={1.4} />
                    </span>
                    Email
                  </a>
                  <a
                    class="sidebar__link"
                    href="https://linkedin.com/in/tuliocunha"
                    target="_blank"
                    rel="noreferrer noopener"
                  >
                    <span class="icon-tile icon-tile--blue" aria-hidden="true">
                      <img
                        src="/icons/profile-linkedin.svg"
                        alt=""
                        loading="lazy"
                        decoding="async"
                      />
                    </span>
                    LinkedIn
                  </a>
                  <a
                    class="sidebar__link"
                    href="https://fantastical.app/tuliopinheirocunha"
                    target="_blank"
                    rel="noreferrer noopener"
                  >
                    <span class="icon-tile" aria-hidden="true">
                      <SFIcon name="calendar" size={22} stroke={1.4} />
                    </span>
                    Book Time
                  </a>
                </div>
              </nav>
              <div class="sidebar__filter">
                <input
                  id="sidebarFilter"
                  type="search"
                  placeholder="Filter"
                  aria-label="Filter sidebar"
                />
                <kbd class="slash">/</kbd>
                <span
                  class="sr-only"
                  data-sidebar-status
                  aria-live="polite"
                  role="status"
                />
              </div>
            </div>
          </aside>
        )
      }

      <section class="content">
        <div id="main">
          <slot />
        </div>
        <footer class="footer">
          <div class="footer__inner">
            <div class="footer__about">
              <p class="footer__title">
                <span class="footer__titleRow">
                  Tulio Cunha
                  <PersonalIcon size={20} class="footer__icon" />
                </span>
              </p>
              <p class="footer__copy">
                Full stack developer building native and web experiences through precise
                tooling and considerate interfaces.
              </p>
            </div>
            <div class="footer__links" aria-label="Footer links">
              <a href="/projects">Projects</a>
              <a href="/blog/">Blog</a>
              <a
                href="https://portfolio.tuliocunha.dev"
                target="_blank"
                rel="noreferrer noopener">Portfolio</a
              >
              <a href="mailto:contact@tuliocunha.dev">Email</a>
            </div>
            <p class="footer__legal">
              Â© {new Date().getFullYear()} Tulio Cunha. Built with Astro.
            </p>
          </div>
        </footer>
      </section>
    </main>

    <ScrollToTop />

    <script>
      import "../scripts/motion.ts";
      import "../scripts/theme.ts";
      import "../scripts/sidebar.ts";
      import "../scripts/scroll-indicators.ts";
    </script>
    <script is:inline>
      if (typeof window !== "undefined") {
        const mask = document.querySelector("[data-topbar-mask]");
        const list = mask?.querySelector("[data-topbar-list]");

        const updateEdges = () => {
          if (!mask) return;
          const atStart = mask.scrollLeft <= 1;
          const atEnd = mask.scrollLeft + mask.clientWidth >= mask.scrollWidth - 1;
          mask.dataset.edgeStart = atStart ? "true" : "false";
          mask.dataset.edgeEnd = atEnd ? "true" : "false";
        };

        const centerActive = () => {
          if (!mask || !list) return;
          if (!window.matchMedia("(max-width: 1023px)").matches) return;
          const active = list.querySelector('a[aria-current="page"]');
          if (!active) return;
          const reduceMotion = window.matchMedia(
            "(prefers-reduced-motion: reduce)"
          ).matches;
          requestAnimationFrame(() => {
            const activeRect = active.getBoundingClientRect();
            const maskRect = mask.getBoundingClientRect();
            const offset = activeRect.left - maskRect.left;
            const scrollLeft =
              mask.scrollLeft + offset - (mask.clientWidth - active.clientWidth) / 2;
            mask.scrollTo({
              left: Math.max(scrollLeft, 0),
              behavior: reduceMotion ? "auto" : "smooth",
            });
          });
        };

        if (mask) {
          updateEdges();
          centerActive();
          mask.addEventListener("scroll", updateEdges, { passive: true });
          window.addEventListener("resize", () => {
            updateEdges();
            centerActive();
          });
        }

        // Keyboard navigation for topbar nav links (arrow keys)
        const navLinks = list?.querySelectorAll(".topbar__navLink");
        if (navLinks && navLinks.length > 0) {
          navLinks.forEach((link, index) => {
            link.addEventListener("keydown", (e) => {
              if (e.key === "ArrowRight" || e.key === "ArrowLeft") {
                e.preventDefault();
                let nextIndex;
                if (e.key === "ArrowRight") {
                  nextIndex = (index + 1) % navLinks.length;
                } else {
                  nextIndex = (index - 1 + navLinks.length) % navLinks.length;
                }
                navLinks[nextIndex].focus();
              }
            });
          });
        }
      }
    </script>
    <script type="module">
      const isBrowser = typeof window !== "undefined";

      class ThemeController {
        constructor() {
          this.initialized = false;
          this.current = "dark";
          this.stored = null;
          this.listeners = new Set();
          this.mediaQuery = null;
          this.reduceMotionQuery = null;
          this.transitionTimeoutId = null;
        }

        init() {
          if (!isBrowser || this.initialized) {
            return this.current;
          }

          this.initialized = true;
          this.mediaQuery = window.matchMedia("(prefers-color-scheme: light)");
          this.reduceMotionQuery = window.matchMedia("(prefers-reduced-motion: reduce)");

          this.stored = this.readStoredTheme();
          const resolved = this.resolveInitialTheme();
          this.applyTheme(resolved);

          const handleMediaChange = (event) => {
            if (this.stored) {
              return;
            }
            this.applyTheme(event.matches ? "light" : "dark");
          };

          if (this.mediaQuery) {
            if (typeof this.mediaQuery.addEventListener === "function") {
              this.mediaQuery.addEventListener("change", handleMediaChange);
            } else if (typeof this.mediaQuery.addListener === "function") {
              this.mediaQuery.addListener(handleMediaChange);
            }
          }

          return this.current;
        }

        getTheme() {
          return this.current;
        }

        prefersReducedMotion() {
          if (!isBrowser) {
            return false;
          }

          if (!this.reduceMotionQuery) {
            this.reduceMotionQuery = window.matchMedia(
              "(prefers-reduced-motion: reduce)"
            );
          }

          return this.reduceMotionQuery.matches;
        }

        subscribe(listener) {
          if (!this.initialized) {
            this.init();
          }

          this.listeners.add(listener);
          listener(this.current);

          return () => {
            this.listeners.delete(listener);
          };
        }

        toggleTheme(options = {}) {
          const next = this.current === "light" ? "dark" : "light";
          this.setTheme(next, options);
        }

        setTheme(theme, options = {}) {
          const persist = options.persist ?? true;
          if (!this.initialized) {
            this.init();
          }
          this.applyTheme(theme, persist);
        }

        applyTheme(theme, persist = false) {
          if (!isBrowser) {
            return;
          }

          const root = document.documentElement;
          const next = theme === "light" ? "light" : "dark";

          root.setAttribute("data-theme", next);

          if (next === "light") {
            root.classList.remove("dark");
            root.classList.add("light");
          } else {
            root.classList.remove("light");
            root.classList.add("dark");
          }

          const favicon = document.querySelector('link[rel="icon"]');
          if (favicon) {
            favicon.href = next === "light" ? "/favicon-light.svg" : "/favicon-dark.svg";
          }

          this.current = next;

          if (persist) {
            this.stored = next;
            this.persistTheme(next);
          }

          if (!this.prefersReducedMotion()) {
            if (typeof window !== "undefined") {
              if (this.transitionTimeoutId !== null) {
                window.clearTimeout(this.transitionTimeoutId);
              }
              root.classList.add("theme-transition");
              this.transitionTimeoutId = window.setTimeout(() => {
                root.classList.remove("theme-transition");
                this.transitionTimeoutId = null;
              }, 400);
            }
          } else {
            root.classList.remove("theme-transition");
          }

          this.listeners.forEach((listener) => {
            listener(next);
          });
        }

        resolveInitialTheme() {
          const root = document.documentElement;

          if (this.stored === "light" || this.stored === "dark") {
            return this.stored;
          }

          const htmlTheme = root.getAttribute("data-theme");
          if (htmlTheme === "light" || htmlTheme === "dark") {
            return htmlTheme;
          }

          if (this.mediaQuery?.matches) {
            return "light";
          }

          return "dark";
        }

        readStoredTheme() {
          if (!isBrowser) {
            return null;
          }

          try {
            const value = window.localStorage.getItem("theme");
            return value === "light" || value === "dark" ? value : null;
          } catch {
            return null;
          }
        }

        persistTheme(theme) {
          if (!isBrowser) {
            return;
          }

          try {
            window.localStorage.setItem("theme", theme);
          } catch {
            // ignore storage errors
          }
        }
      }

      const controllerKey = "__themeController";
      let controller = window[controllerKey];
      if (!(controller instanceof ThemeController)) {
        controller = new ThemeController();
        window[controllerKey] = controller;
      }

      window.themeController = {
        init: () => controller.init(),
        getTheme: () => controller.getTheme(),
        toggleTheme: (options) => controller.toggleTheme(options ?? {}),
        setTheme: (theme, options) => controller.setTheme(theme, options ?? {}),
        subscribe: (listener) => controller.subscribe(listener),
        prefersReducedMotion: () => controller.prefersReducedMotion(),
      };

      const clamp = (value, min, max) => Math.min(max, Math.max(min, value));

      const initLiquidThemeToggle = (root) => {
        if (!isBrowser || !root) {
          return;
        }

        const button = root.matches("button") ? root : root.querySelector("button");
        if (!(button instanceof HTMLButtonElement)) {
          return;
        }

        button.type = "button";

        if (button.dataset.themeToggleBound === "true") {
          return;
        }
        button.dataset.themeToggleBound = "true";

        const getTheme = window.themeController.getTheme;
        const setTheme = window.themeController.setTheme;
        const toggleTheme = window.themeController.toggleTheme;
        const prefersReducedMotion = window.themeController.prefersReducedMotion;
        const subscribeToTheme = window.themeController.subscribe;

        button.setAttribute("aria-pressed", getTheme() === "dark" ? "true" : "false");

        let currentComplete = getTheme() === "dark" ? 100 : 0;
        let pointerMode = "idle";
        let pointerId = null;
        let startX = 0;
        let skipClick = false;

        const updateMotionPreference = () => {
          button.dataset.motion = prefersReducedMotion() ? "reduced" : "normal";
        };

        const setComplete = (value, instant = false) => {
          currentComplete = clamp(value, 0, 100);
          if (instant) {
            button.dataset.instant = "true";
          }
          button.style.setProperty("--complete", currentComplete.toFixed(2));
          if (instant) {
            requestAnimationFrame(() => {
              button.dataset.instant = "false";
            });
          }
        };

        const themeToComplete = (theme) => (theme === "dark" ? 100 : 0);

        const updateFromTheme = (theme) => {
          button.setAttribute("aria-pressed", theme === "dark" ? "true" : "false");
          if (pointerMode === "drag") {
            return;
          }
          setComplete(themeToComplete(theme), true);
        };

        const rectComplete = (clientX) => {
          const rect = button.getBoundingClientRect();
          const percent = ((clientX - rect.left) / rect.width) * 100;
          return clamp(percent, 0, 100);
        };

        const releasePointer = () => {
          if (pointerId !== null) {
            try {
              button.releasePointerCapture(pointerId);
            } catch {
              // ignore release errors
            }
          }
          pointerId = null;
          pointerMode = "idle";
          button.dataset.dragging = "false";
        };

        const handlePointerDown = (event) => {
          if (event.button !== 0) {
            return;
          }

          pointerMode = "tap";
          pointerId = event.pointerId;
          startX = event.clientX;
          skipClick = false;

          button.dataset.dragging = "true";
          button.setPointerCapture(event.pointerId);

          if (prefersReducedMotion()) {
            return;
          }

          const percent = rectComplete(event.clientX);
          setComplete(percent);
        };

        const handlePointerMove = (event) => {
          if (pointerMode === "idle" || event.pointerId !== pointerId) {
            return;
          }

          const distance = Math.abs(event.clientX - startX);
          if (pointerMode === "tap" && distance > 4) {
            pointerMode = "drag";
          }

          if (pointerMode !== "drag") {
            return;
          }

          const percent = rectComplete(event.clientX);
          setComplete(percent);
        };

        const handlePointerUp = (event) => {
          if (pointerMode === "idle" || event.pointerId !== pointerId) {
            return;
          }

          const wasDrag = pointerMode === "drag";
          const targetTheme = currentComplete >= 50 ? "dark" : "light";

          releasePointer();

          if (wasDrag) {
            skipClick = true;
            setTheme(targetTheme, { persist: true });
            return;
          }

          setComplete(themeToComplete(getTheme()), true);
        };

        const handlePointerCancel = (event) => {
          if (pointerMode === "idle" || event.pointerId !== pointerId) {
            return;
          }

          releasePointer();
          setComplete(themeToComplete(getTheme()), true);
        };

        const handleClick = (event) => {
          if (skipClick) {
            skipClick = false;
            event.preventDefault();
            return;
          }

          toggleTheme({ persist: true });
        };

        const handleKeyDown = (event) => {
          if (event.key === " " || event.key === "Enter") {
            event.preventDefault();
          }
        };

        const handleKeyUp = (event) => {
          if (event.key !== " " && event.key !== "Enter") {
            return;
          }
          event.preventDefault();
          skipClick = true;
          toggleTheme({ persist: true });
        };

        updateMotionPreference();

        const motionQuery = window.matchMedia("(prefers-reduced-motion: reduce)");
        const motionListener = () => updateMotionPreference();
        if (typeof motionQuery.addEventListener === "function") {
          motionQuery.addEventListener("change", motionListener);
        } else if (typeof motionQuery.addListener === "function") {
          motionQuery.addListener(motionListener);
        }

        button.addEventListener("pointerdown", handlePointerDown);
        button.addEventListener("pointermove", handlePointerMove);
        button.addEventListener("pointerup", handlePointerUp);
        button.addEventListener("pointercancel", handlePointerCancel);
        button.addEventListener("click", handleClick);
        button.addEventListener("keydown", handleKeyDown);
        button.addEventListener("keyup", handleKeyUp);

        subscribeToTheme(updateFromTheme);

        setComplete(themeToComplete(getTheme()), true);
      };

      window.initLiquidThemeToggle = initLiquidThemeToggle;

      const initializeAllToggles = () => {
        document.querySelectorAll("[data-theme-toggle-root]").forEach((element) => {
          initLiquidThemeToggle(element);
        });
      };

      if (document.readyState === "loading") {
        document.addEventListener("DOMContentLoaded", initializeAllToggles, {
          once: true,
        });
      } else {
        initializeAllToggles();
      }

      document.addEventListener("astro:page-load", initializeAllToggles);
    </script>
  </body>
</html>
