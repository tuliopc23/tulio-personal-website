---
import { PortableText } from "astro-portabletext";
import type { PortableTextBlock } from "@portabletext/types";

interface Props {
  value: {
    variant: "info" | "warning" | "success" | "error";
    title?: string;
    body: PortableTextBlock[];
  };
}

const { value } = Astro.props;
const { variant, title, body } = value;

// Icon mapping for reference (icons rendered inline below)
// info: info.circle.fill
// warning: exclamationmark.triangle.fill
// success: checkmark.circle.fill
// error: xmark.circle.fill
---

<div class={`callout callout--${variant}`} role="note" aria-label={`${variant} callout`}>
  <div class="callout__icon" aria-hidden="true">
    <svg width="20" height="20" viewBox="0 0 20 20" fill="currentColor">
      {
        variant === "info" && (
          <>
            <circle cx="10" cy="10" r="9" opacity="0.2" />
            <path d="M10 0C4.48 0 0 4.48 0 10s4.48 10 10 10 10-4.48 10-10S15.52 0 10 0zm1 15H9V9h2v6zm0-8H9V5h2v2z" />
          </>
        )
      }
      {
        variant === "warning" && (
          <>
            <path
              d="M10 0L0 17.32h20L10 0zm1 14.5H9v-2h2v2zm0-3.5H9V6h2v5z"
              opacity="0.2"
            />
            <path d="M10 0L0 17.32h20L10 0zm1 14.5H9v-2h2v2zm0-3.5H9V6h2v5z" />
          </>
        )
      }
      {
        variant === "success" && (
          <>
            <circle cx="10" cy="10" r="9" opacity="0.2" />
            <path d="M10 0C4.48 0 0 4.48 0 10s4.48 10 10 10 10-4.48 10-10S15.52 0 10 0zm-2 14.5l-3.5-3.5 1.41-1.41L8 11.67l5.09-5.09L14.5 8l-6.5 6.5z" />
          </>
        )
      }
      {
        variant === "error" && (
          <>
            <circle cx="10" cy="10" r="9" opacity="0.2" />
            <path d="M10 0C4.48 0 0 4.48 0 10s4.48 10 10 10 10-4.48 10-10S15.52 0 10 0zm5 13.59L13.59 15 10 11.41 6.41 15 5 13.59 8.59 10 5 6.41 6.41 5 10 8.59 13.59 5 15 6.41 11.41 10 15 13.59z" />
          </>
        )
      }
    </svg>
  </div>
  <div class="callout__content">
    {title && <div class="callout__title">{title}</div>}
    <div class="callout__body">
      <PortableText value={body} />
    </div>
  </div>
</div>

<style>
  .callout {
    display: flex;
    gap: var(--space-sm);
    padding: var(--space-md);
    border-radius: var(--radius-md);
    margin: var(--space-lg) 0;
    border: 1px solid;
  }

  .callout--info {
    background: var(--info-bg);
    border-color: var(--info-border);
    color: var(--info-text);
  }

  .callout--warning {
    background: var(--warning-bg);
    border-color: var(--warning-border);
    color: var(--warning-text);
  }

  .callout--success {
    background: var(--success-bg);
    border-color: var(--success-border);
    color: var(--success-text);
  }

  .callout--error {
    background: var(--danger-bg);
    border-color: var(--danger-border);
    color: var(--danger-text);
  }

  .callout__icon {
    flex-shrink: 0;
    margin-top: 2px;
  }

  .callout__content {
    flex: 1;
    min-width: 0;
  }

  .callout__title {
    font-weight: 600;
    font-size: var(--fs-0);
    margin-bottom: var(--space-xs);
  }

  .callout__body {
    font-size: var(--fs--1);
    line-height: 1.6;
  }

  .callout__body :global(p) {
    margin: 0;
  }

  .callout__body :global(p + p) {
    margin-top: var(--space-xs);
  }

  .callout__body :global(strong) {
    font-weight: 600;
  }

  .callout__body :global(code) {
    font-family: var(--font-mono);
    font-size: 0.9em;
    padding: 2px 4px;
    border-radius: 4px;
    background: rgba(0, 0, 0, 0.1);
  }

  .callout__body :global(a) {
    color: inherit;
    text-decoration: underline;
    text-underline-offset: 2px;
  }
</style>
