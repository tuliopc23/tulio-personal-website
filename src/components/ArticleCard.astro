---
import SFIcon from "./SFIcon.astro";
import PhosphorIcon from "./PhosphorIcon.astro";
import CategoryBadges from "./CategoryBadges.astro";
import type { Category } from "../sanity/lib/posts";

interface Props {
  href: string;
  title: string;
  summary: string;
  dateISO: string;
  dateLabel: string;
  tags?: string[];
  categories?: Category[] | null;
  featured?: boolean;
  revealGroup?: string;
  revealOrder?: number | string;
  revealDelay?: string;
  readingTimeMinutes?: number;
  isNew?: boolean;
}

const {
  href,
  title,
  summary,
  dateISO,
  dateLabel,
  tags = [],
  categories = [],
  featured = false,
  revealGroup = "articles",
  revealOrder,
  revealDelay,
  readingTimeMinutes,
  isNew = false,
}: Props = Astro.props;
const _tagLabel = tags.join(" Â· ");
const _revealOrderAttr =
  revealOrder === undefined || revealOrder === null ? undefined : String(revealOrder);
const _readingTimeLabel =
  typeof readingTimeMinutes === "number" && Number.isFinite(readingTimeMinutes)
    ? `${Math.max(1, Math.round(readingTimeMinutes))} min read`
    : null;
---

<article
  class={`articleCard${featured ? " articleCard--featured" : ""}`}
  data-reveal
  data-reveal-group={revealGroup}
  data-reveal-order={_revealOrderAttr}
  data-reveal-delay={revealDelay ?? undefined}
>
  <a class="articleCard__link" href={href}>
    <header class="articleCard__header">
      <div class="articleCard__meta" aria-label="Post metadata">
        <span class="articleCard__metaItem">
          <PhosphorIcon name="calendar" size={14} weight="regular" />
          <time datetime={dateISO}>{dateLabel}</time>
        </span>
        {
          _readingTimeLabel && (
            <span class="articleCard__metaItem">
              <PhosphorIcon name="clock" size={14} weight="regular" />
              {_readingTimeLabel}
            </span>
          )
        }
        {isNew && <span class="articleCard__metaItem articleCard__newBadge">New</span>}
        {
          _tagLabel && (
            <span class="articleCard__metaItem articleCard__metaTags" aria-label="Tags">
              {_tagLabel}
            </span>
          )
        }
      </div>
      <h3 class="articleCard__title">{title}</h3>
    </header>
    <p class="articleCard__summary">{summary}</p>
    <div class="articleCard__taxonomy">
      <CategoryBadges categories={categories} limit={2} />
      {
        tags.length > 0 && (
          <ul class="articleCard__tags" aria-label="Tags">
            {tags.map((tag) => (
              <li class="articleCard__tag">{tag}</li>
            ))}
          </ul>
        )
      }
    </div>
    <span class="articleCard__cta">
      <span>Read article</span>
      <PhosphorIcon name="arrow-up-right" size={16} weight="regular" />
    </span>
  </a>
</article>

<style>
  .articleCard__taxonomy {
    display: flex;
    flex-direction: column;
    gap: var(--space-sm);
  }
</style>
