---
import { urlFor, generateSrcset } from "../sanity/lib/image";

interface Props {
  value: {
    url?: string;
    alt?: string | null;
    caption?: string | null;
    lqip?: string | null;
    width?: number;
    height?: number;
    asset?: any; // Sanity image asset reference
  };
}

const { value }: Props = Astro.props;
const hasAsset = Boolean(value?.url);

const alt = value.alt && value.alt.trim().length > 0 ? value.alt : "";
const loading = "lazy";
const decoding = "async";

// Generate optimized image URLs with Sanity CDN
const imageSource = value.asset || value.url;
const src = imageSource
  ? urlFor(imageSource).width(1280).auto("format").quality(80).url()
  : value.url;

// Generate responsive srcset for different viewport sizes
const srcset = imageSource
  ? generateSrcset(imageSource, [320, 640, 768, 1024, 1280, 1920])
  : undefined;

// Use LQIP (Low Quality Image Placeholder) for blur-up effect
const placeholder = value.lqip;
---

{
  hasAsset && (
    <figure class="articlePortable__figure">
      {placeholder && (
        <img
          src={placeholder}
          alt=""
          aria-hidden="true"
          class="articlePortable__placeholder"
          style={
            value.width && value.height
              ? `aspect-ratio: ${value.width} / ${value.height};`
              : undefined
          }
        />
      )}
      <img
        src={src}
        srcset={srcset}
        sizes="(max-width: 768px) 100vw, (max-width: 1280px) 768px, 1024px"
        alt={alt}
        loading={loading}
        decoding={decoding}
        width={value.width}
        height={value.height}
        style={
          value.width && value.height
            ? `aspect-ratio: ${value.width} / ${value.height};`
            : undefined
        }
        data-image-loading
      />
      {value.caption && (
        <figcaption class="articlePortable__caption">{value.caption}</figcaption>
      )}
    </figure>
  )
}

<script>
  const images = Array.from(document.querySelectorAll("[data-image-loading]"));
  images.forEach((img) => {
    const show = () => img.setAttribute("data-loaded", "true");
    if (img.complete) show();
    else img.addEventListener("load", show, { once: true });
  });
</script>
