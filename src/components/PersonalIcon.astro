---
interface Props {
  size?: number;
  class?: string;
}

const { size = 24, class: className = "" } = Astro.props;
---

<button
  type="button"
  class={`personal-icon ${className}`}
  style={`--pi-size: ${size}px`}
  aria-label="Toggle theme"
  data-theme-toggle-icon
>
  <img src="/icons/ICONLIGHT.svg" class="pi__dark" alt="" decoding="async" />
  <img src="/icons/icondarkoptimized.svg" class="pi__light" alt="" decoding="async" />
</button>

<style>
  .personal-icon {
    /* Reset button styles */
    appearance: none;
    border: none;
    background: transparent;
    padding: 0;
    cursor: pointer;
    
    /* Layout */
    display: inline-grid;
    place-items: center;
    width: var(--pi-size, 24px);
    height: var(--pi-size, 24px);
    border-radius: 20%;
    
    /* Enhanced elevation - Apple HIG multi-layer shadows */
    box-shadow: 
      0 1px 3px rgba(0, 0, 0, 0.12),
      0 1px 2px rgba(0, 0, 0, 0.24),
      0 2px 8px rgba(0, 0, 0, 0.08);
    
    /* Smooth animations */
    transition:
      transform 260ms cubic-bezier(0.2, 0.8, 0.2, 1),
      box-shadow 260ms cubic-bezier(0.2, 0.8, 0.2, 1);
    
    /* Performance hints */
    will-change: transform, box-shadow;
    transform: translateZ(0);
    
    /* Ensure proper stacking */
    position: relative;
    isolation: isolate;
  }

  /* Enhanced hover state - more prominent shadow */
  .personal-icon:hover {
    transform: scale(1.03) translateZ(0);
    box-shadow: 
      0 4px 12px rgba(0, 0, 0, 0.15),
      0 2px 4px rgba(0, 0, 0, 0.12),
      0 8px 24px rgba(0, 0, 0, 0.1);
  }

  /* Active/pressed state - Apple-like press down */
  .personal-icon:active {
    transform: scale(0.96) translateZ(0);
    transition-duration: 80ms;
  }

  /* Focus state - accessible outline */
  .personal-icon:focus-visible {
    outline: 2px solid var(--pi-focus-ring);
    outline-offset: 3px;
  }

  /* Stacked images with grid overlay */
  .personal-icon img {
    grid-area: 1 / 1;
    width: 100%;
    height: 100%;
    display: block;
    pointer-events: none;
    user-select: none;
    -webkit-user-drag: none;
    
    /* Remove all borders and frames */
    border: none !important;
    outline: none !important;
    background: transparent !important;
    box-shadow: none !important;
    
    /* Perfect fit without distortion */
    object-fit: contain;
    object-position: center;
    
    /* Smooth cross-fade transition */
    opacity: 0;
    transition: opacity 220ms cubic-bezier(0.2, 0.8, 0.2, 1);
  }

  /* Theme-based visibility - controlled by global CSS variables */
  .personal-icon .pi__dark {
    opacity: var(--pi-dark, 1);
  }

  .personal-icon .pi__light {
    opacity: var(--pi-light, 0);
  }

  /* Reduced motion support */
  @media (prefers-reduced-motion: reduce) {
    .personal-icon,
    .personal-icon img {
      transition: none !important;
    }
    
    .personal-icon:hover,
    .personal-icon:active {
      transform: none !important;
    }
  }

  /* High contrast mode support */
  @media (prefers-contrast: high) {
    .personal-icon {
      outline: 1px solid currentColor;
      outline-offset: 2px;
    }
  }
</style>

<script>
  // Connect personal icon buttons to theme system
  document.addEventListener("DOMContentLoaded", () => {
    const iconButtons = document.querySelectorAll("[data-theme-toggle-icon]");
    
    iconButtons.forEach((button) => {
      button.addEventListener("click", () => {
        // Trigger theme toggle (this will be handled by existing theme.ts)
        const themeToggle = document.querySelector("[data-theme-toggle]") as HTMLInputElement;
        if (themeToggle) {
          themeToggle.checked = !themeToggle.checked;
          themeToggle.dispatchEvent(new Event("change", { bubbles: true }));
        }
      });
    });
  });
</script>
