---
interface Props {
  href?: string;
  title?: string;
  body?: string;
  tint?: string;
  cta?: string;
  icon?: string | null;
  revealGroup?: string;
  revealOrder?: number | string;
  revealDelay?: string;
}

const {
  href,
  title = "Card title",
  body = "",
  tint = "blue",
  cta = "Read more →",
  icon = null,
  revealGroup,
  revealOrder,
  revealDelay,
} = Astro.props as Props;

const ctaLabel = cta ? cta.replace(/\s*→$/, "") : null;
const _revealOrderAttr =
  revealOrder === undefined || revealOrder === null ? undefined : String(revealOrder);
const isInteractive = typeof href === "string" && href.trim().length > 0;
const _cardClasses = ["card", !isInteractive ? "card--static" : null].filter(Boolean).join(" ");
const _showCTA = isInteractive && Boolean(ctaLabel);
---

{
  isInteractive ? (
    <a
      class={cardClasses}
      href={href}
      data-reveal
      data-reveal-group={revealGroup ?? undefined}
      data-reveal-order={revealOrderAttr}
      data-reveal-delay={revealDelay ?? undefined}
    >
      <div class="card__inner">
        <IconTile tint={tint} label={title} icon={icon} />
        <div class="card__content">
          <div class="card-title">{title}</div>
          <p class="card-body">{body}</p>
          {showCTA && <span class="card__cta">{ctaLabel}</span>}
        </div>
      </div>
    </a>
  ) : (
    <div
      class={cardClasses}
      data-reveal
      data-reveal-group={revealGroup ?? undefined}
      data-reveal-order={revealOrderAttr}
      data-reveal-delay={revealDelay ?? undefined}
      role="presentation"
    >
      <div class="card__inner">
        <IconTile tint={tint} label={title} icon={icon} />
        <div class="card__content">
          <div class="card-title">{title}</div>
          <p class="card-body">{body}</p>
        </div>
      </div>
    </div>
  )
}

<script is:inline>
  (() => {
    // Ripple effect on card click
    const initCardRipple = () => {
      const cards = document.querySelectorAll(".card:not(.card--static)");

      cards.forEach((card) => {
        card.addEventListener("click", function (e) {
          // Check for reduced motion preference
          const prefersReducedMotion = window.matchMedia(
            "(prefers-reduced-motion: reduce)"
          ).matches;
          if (prefersReducedMotion) return;

          const ripple = document.createElement("span");
          ripple.classList.add("card__ripple");

          const rect = this.getBoundingClientRect();
          const size = Math.max(rect.width, rect.height);
          const x = e.clientX - rect.left - size / 2;
          const y = e.clientY - rect.top - size / 2;

          ripple.style.width = ripple.style.height = `${size}px`;
          ripple.style.left = `${x}px`;
          ripple.style.top = `${y}px`;

          this.appendChild(ripple);

          // Remove ripple after animation completes
          setTimeout(() => ripple.remove(), 600);
        });
      });
    };

    // Initialize on page load
    if (document.readyState === "loading") {
      document.addEventListener("DOMContentLoaded", initCardRipple);
    } else {
      initCardRipple();
    }
  })();
</script>
