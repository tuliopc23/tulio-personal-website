---
import Base from "../layouts/Base.astro";
import ProfileCard from "../components/ProfileCard.astro";
import RecentPosts from "../components/RecentPosts.astro";
import Breadcrumbs from "../components/Breadcrumbs.astro";
import Card from "../components/Card.astro";
import PageIndicator from "../components/PageIndicator.astro";
import ScrollHint from "../components/ScrollHint.astro";
import "../styles/section.css";
import { getAllPosts, getFeaturedPosts } from "../sanity/lib/posts";

const posts = await getAllPosts();
const featuredPosts = await getFeaturedPosts();
const featuredWriting = featuredPosts.length > 0 ? featuredPosts.slice(0, 3) : posts.slice(0, 3);

const fallbackWriting = [
  {
    slug: "liquid-glass",
    title: "Liquid glass on the web",
    summary: "How to recreate Apple's materials with CSS blur, transparency, and borders.",
    tint: "blue" as const,
  },
  {
    slug: "sidebar-ux",
    title: "Sidebar UX like Apple Docs",
    summary: "Sticky sections, quick filter, and semantics.",
    tint: "teal" as const,
  },
  {
    slug: "system-fonts",
    title: "System font stacks",
    summary: "Use -apple-system and friends correctly.",
    tint: "orange" as const,
  },
];

const tintByTag: Record<string, string> = {
  design: "orange",
  accessibility: "teal",
  tooling: "blue",
  engineering: "blue",
  swift: "orange",
  frontend: "teal",
  ux: "blue",
  writing: "yellow",
};

const _writingCards =
  featuredWriting.length === 0
    ? fallbackWriting.map((item) => ({
        title: item.title,
        summary: item.summary,
        href: `/blog/${item.slug}/`,
        tint: item.tint,
      }))
    : featuredWriting.map((post, index) => {
        const fallbackTint = fallbackWriting[index]?.tint ?? "indigo";
        const tagTint = post.tags.map((tag) => tintByTag[tag.toLowerCase()]).find(Boolean);
        return {
          title: post.title,
          summary: post.summary,
          href: `/blog/${post.slug}/`,
          tint: tagTint ?? fallbackTint,
        };
      });

const _techStack = [
  {
    title: "Swift",
    body: "Native macOS and iOS development.",
    tint: "orange",
    icon: "swift",
  },
  {
    title: "TypeScript",
    body: "Structured web applications.",
    tint: "blue",
    icon: "typescript",
  },
  {
    title: "Rust",
    body: "Systems programming with safety.",
    tint: "brown",
    icon: "rust",
  },
  {
    title: "Zig",
    body: "Low-level ergonomics and performance.",
    tint: "yellow",
    icon: "zig",
  },
  {
    title: "Go",
    body: "Backend services and tooling.",
    tint: "teal",
    icon: "go",
  },
  {
    title: "React",
    body: "Component-driven UI.",
    tint: "blue",
    icon: "react",
  },
  {
    title: "Svelte",
    body: "Motion-forward, compiled interfaces.",
    tint: "orange",
    icon: "svelte",
  },
  {
    title: "Vue",
    body: "Progressive web app craftsmanship.",
    tint: "green",
    icon: "vue",
  },
  {
    title: "Docker",
    body: "Portable environments and deployment pipelines.",
    tint: "cyan",
    icon: "docker",
  },
];

const _tools = [
  {
    title: "Ghostty",
    body: "GPU-accelerated terminal for speed and ergonomics.",
    tint: "blue",
    icon: "ghostty",
  },
  {
    title: "Neovim",
    body: "Lua-powered, modal editing workflow.",
    tint: "green",
    icon: "neovim",
  },
  {
    title: "Xcode",
    body: "Native IDE for Apple platforms.",
    tint: "blue",
    icon: "xcode",
  },
  {
    title: "Apple\nContainers",
    body: "Apple Silicon native containerization runtime.",
    tint: "cyan",
    icon: "apple-containerization",
  },
  {
    title: "Transmit",
    body: "High-speed macOS file transfer and deployment.",
    tint: "yellow",
    icon: "transmit",
  },
  {
    title: "Kaleidoscope",
    body: "High-fidelity diff and merge tooling.",
    tint: "teal",
    icon: "kaleidoscope",
  },
  {
    title: "CodeEdit",
    body: "Lightweight, native macOS code editor.",
    tint: "blue",
    icon: "code-edit",
  },
  {
    title: "Tower",
    body: "Native Git client with visual diffs and history.",
    tint: "orange",
    icon: "tower",
  },
  {
    title: "Orbstack",
    body: "Streamlined Docker and Linux VMs for macOS.",
    tint: "indigo",
    icon: "orbstack",
  },
];

const siteOrigin = Astro.site?.origin ?? Astro.url?.origin ?? "https://www.tuliocunha.dev";
const _canonical = new URL("/", siteOrigin).toString();
const description =
  "Tulio Cunha is a full stack developer crafting native and web experiences with Apple-inspired precision.";
const _heroImage = "/terminal-favicon.svg";
const _structuredData = {
  "@context": "https://schema.org",
  "@type": "Person",
  name: "Tulio Cunha",
  url: siteOrigin,
  jobTitle: "Full Stack Developer",
  description,
  sameAs: [
    "https://github.com/tuliopc23",
    "https://linkedin.com/in/tuliocunha",
    "https://instagram.com/tuliopinheirocunha",
  ],
};
---

<Base
  title="Home"
  description={description}
  canonical={_canonical}
  ogDescription={description}
  ogImage={{ url: _heroImage, alt: "Tulio Cunha portfolio hero" }}
  structuredData={_structuredData}
  sidebar={true}
>
  <section
    class="hero container"
    data-reveal
    data-reveal-type="scale"
    data-reveal-group="home-hero"
  >
    <Breadcrumbs items={[{ label: "Home", icon: "home" }]} />
    <h1 class="hero__title">Hi, I'm Tulio Cunha.</h1>
    <p class="hero__subtitle">
      Full stack developer crafting native and web tools with calm detail and reliable
      execution.
    </p>
  </section>

  <section class="container home__section" data-reveal data-reveal-group="home-profile">
    <ProfileCard
      name="Tulio Cunha"
      title="Full Stack Developer"
      location="Brazil"
      email="contact@tuliocunha.dev"
    />
    <ScrollHint target="[data-quick-links-rail]" />
    <div class="home__quickLinks cardRail" data-quick-links-rail>
      <Card
        title="Projects"
        body="Projects spanning refined web UIs, full-stack builds, CLI tools, and systems programming."
        href="/projects"
        tint="orange"
        iconAsset="/icons/projects.png"
        cta="Browse projects →"
        revealGroup="home-links"
        revealOrder={0}
      />
      <Card
        title="Blog"
        body="Notes on engineering, experiences, products, tastes, and tips worth sharing."
        href="/blog/"
        tint="blue"
        iconAsset="/icons/blog.png"
        cta="Browse the journal →"
        revealGroup="home-links"
        revealOrder={1}
      />
    </div>
    <PageIndicator
      containerSelector="[data-quick-links-rail]"
      itemSelector=".card"
      ariaLabel="Quick links navigation"
    />
  </section>

  <section class="container" data-reveal data-reveal-group="home-tech">
    <h2
      class="section-title"
      data-reveal
      data-reveal-group="home-tech"
      data-reveal-order={0}
    >
      Tech stack
    </h2>
    <ScrollHint target="[data-tech-stack-rail]" />
    <div class="cardGrid cardRail" data-tech-stack-rail>
      {
        _techStack.map((entry, index) => (
          <Card
            title={entry.title}
            body={entry.body}
            tint={entry.tint}
            icon={entry.icon}
            revealGroup="home-tech"
            revealOrder={index + 1}
          />
        ))
      }
    </div>
    <PageIndicator
      containerSelector="[data-tech-stack-rail]"
      itemSelector=".card"
      ariaLabel="Tech stack navigation"
    />
  </section>

  <section id="tools" class="container" data-reveal data-reveal-group="home-tools">
    <h2
      class="section-title"
      data-reveal
      data-reveal-group="home-tools"
      data-reveal-order={0}
    >
      Tools
    </h2>
    <ScrollHint target="[data-tools-rail]" />
    <div class="cardGrid cardRail" data-tools-rail>
      {
        _tools.map((entry, index) => (
          <Card
            title={entry.title}
            body={entry.body}
            tint={entry.tint}
            icon={entry.icon}
            revealGroup="home-tools"
            revealOrder={index + 1}
          />
        ))
      }
    </div>
    <PageIndicator
      containerSelector="[data-tools-rail]"
      itemSelector=".card"
      ariaLabel="Tools navigation"
    />
  </section>

  <section class="container" data-reveal data-reveal-group="home-writing">
    <h2
      class="section-title"
      data-reveal
      data-reveal-group="home-writing"
      data-reveal-order={0}
    >
      Featured writing
    </h2>
    <ScrollHint target="[data-featured-writing-rail]" />
    <div class="cardGrid cardRail" data-featured-writing-rail>
      {
        _writingCards.map((entry, index) => (
          <Card
            title={entry.title}
            body={entry.summary}
            href={entry.href}
            tint={entry.tint}
            icon="writing"
            cta="Read article →"
            revealGroup="home-writing"
            revealOrder={index + 1}
          />
        ))
      }
    </div>
    <PageIndicator
      containerSelector="[data-featured-writing-rail]"
      itemSelector=".card"
      ariaLabel="Featured writing navigation"
    />
  </section>

  <script is:inline>
    // Scroll-linked parallax for hero gradient (0.3 velocity)
    const hero = document.querySelector(".hero");
    if (hero) {
      const updateParallax = () => {
        const scrollY = window.scrollY;
        const parallaxOffset = scrollY * 0.3;
        hero.style.setProperty("--parallax-offset", `${parallaxOffset}px`);
      };

      // Throttle scroll events for performance
      let ticking = false;
      const handleScroll = () => {
        if (!ticking) {
          window.requestAnimationFrame(() => {
            updateParallax();
            ticking = false;
          });
          ticking = true;
        }
      };

      // Check for reduced motion preference
      const prefersReducedMotion = window.matchMedia(
        "(prefers-reduced-motion: reduce)"
      ).matches;
      if (!prefersReducedMotion) {
        window.addEventListener("scroll", handleScroll, { passive: true });
        updateParallax(); // Initial position
      }
    }
  </script>
</Base>
