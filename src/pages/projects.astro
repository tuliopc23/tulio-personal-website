---
import Base from "../layouts/Base.astro";
import ProjectCard from "../components/ProjectCard.astro";
import Breadcrumbs from "../components/Breadcrumbs.astro";
import { projectsSorted } from "../data/projects";

const siteOrigin =
  Astro.site?.origin ?? Astro.url?.origin ?? "https://www.tuliocunha.dev";
const description =
  "Apple-inspired gallery of Tulio Cunha's latest work including LiqUIdify, Hackerfolio, Switchify, Cockpit, and Swiftget CLI.";
const canonicalUrl = new URL("/projects/", siteOrigin).toString();
const hasProjects = projectsSorted.length > 0;
const projectCount = projectsSorted.length;
const focusSummary = "Design systems • Native apps • Developer tooling";
const projectFilters = [
  { id: "all", label: "All" },
  { id: "native", label: "Native" },
  { id: "web", label: "Web" },
  { id: "tooling", label: "Tooling" },
  { id: "design-system", label: "Design systems" },
];

const structuredData = {
  "@context": "https://schema.org",
  "@type": "ItemList",
  name: "Tulio Cunha Projects",
  description,
  url: canonicalUrl,
};
---

<Base
  title="Projects"
  description={description}
  canonical={canonicalUrl}
  ogDescription={description}
  ogImage={{ url: "/terminal-favicon.svg", alt: "Projects preview" }}
  structuredData={structuredData}
>
  <section
    class="container projects__intro"
    data-reveal
    data-reveal-type="scale"
    data-reveal-group="projects-intro"
  >
    <Breadcrumbs
      items={[
        { label: "Home", href: "/", icon: "home" },
        { label: "Projects", icon: "cube" },
      ]}
    />
    <div class="projects__hero">
      <span class="projects__eyebrow">Recent work</span>
      <h1 class="projects__title">Projects</h1>
      <p class="projects__lede">
        Thoughtfully crafted tools spanning native and web platforms, each embracing
        Apple's design language while solving real workflows for developers and creatives.
      </p>
    </div>
    <div class="projects__meta" role="list">
      <span class="projects__metaItem" role="listitem"
        >{projectCount} featured builds</span
      >
      <span class="projects__metaItem" role="listitem">{focusSummary}</span>
    </div>
    {
      hasProjects && (
        <div class="projects__filters" role="toolbar" aria-label="Filter projects">
          {projectFilters.map((filter, index) => (
            <button
              type="button"
              class={`projectsFilter__button${index === 0 ? " is-active" : ""}`}
              data-project-filter={filter.id}
            >
              {filter.label}
            </button>
          ))}
        </div>
      )
    }
  </section>

  <section class="container" data-reveal data-reveal-group="projects-list">
    {
      hasProjects ? (
        <Fragment>
          <div class="projects__filterEmpty card" data-project-empty hidden>
            <h2>No projects match this view</h2>
            <p>
              Adjust the filter above or reach out at
              <a href="mailto:contact@tuliocunha.dev">contact@tuliocunha.dev</a> for
              portfolio details.
            </p>
          </div>
          <div class="cardGrid cardRail projects__grid" data-projects-grid>
            {projectsSorted.map((project, index) => (
              <ProjectCard project={project} revealOrder={index} />
            ))}
          </div>
        </Fragment>
      ) : (
        <div class="projects__empty card" data-reveal data-reveal-group="projects-list">
          <h2>Projects coming soon</h2>
          <p>
            I'm polishing case studies. In the meantime, reach out at
            <a href="mailto:contact@tuliocunha.dev">contact@tuliocunha.dev</a> if you'd
            like to collaborate.
          </p>
        </div>
      )
    }
  </section>

  <script is:inline>
    const grid = document.querySelector("[data-projects-grid]");
    const cards = Array.from(document.querySelectorAll("[data-project-card]"));
    const filters = Array.from(document.querySelectorAll("[data-project-filter]"));
    const emptyState = document.querySelector("[data-project-empty]");

    if (grid && filters.length > 0 && cards.length > 0) {
      const urlParams = new URLSearchParams(window.location.search);
      let activeFilter = urlParams.get("filter") || "all";

      const validFilters = filters.map((f) => f.dataset.projectFilter).filter(Boolean);
      if (!validFilters.includes(activeFilter)) {
        activeFilter = "all";
      }

      filters.forEach((filter) => {
        filter.classList.toggle(
          "is-active",
          filter.dataset.projectFilter === activeFilter
        );
      });

      const fadeDuration = 200;
      const applyFilters = () => {
        let matches = 0;
        cards.forEach((card) => {
          const categories = (card.dataset.projectCategories ?? "")
            .split(",")
            .filter(Boolean);
          const shouldShow = activeFilter === "all" || categories.includes(activeFilter);

          if (shouldShow) {
            matches += 1;
            if (card.hidden) {
              card.hidden = false;
              card.dataset.state = "showing";
              requestAnimationFrame(() => {
                card.dataset.state = "visible";
              });
            } else {
              card.dataset.state = "visible";
            }
          } else if (!card.hidden) {
            card.dataset.state = "hiding";
            setTimeout(() => {
              card.hidden = true;
              card.dataset.state = "filtered";
            }, fadeDuration);
          } else {
            card.dataset.state = "filtered";
          }
        });

        if (emptyState) {
          emptyState.hidden = matches > 0;
        }

        if (matches > 0) {
          const firstVisible = cards.find((card) => card.dataset.state === "visible");
          if (firstVisible) {
            grid.scrollTo({ top: 0, behavior: "smooth" });
          }
        }
      };

      const selectProjectFilter = (button) => {
        const nextFilter = button.dataset.projectFilter ?? "all";
        if (nextFilter === activeFilter) return;
        activeFilter = nextFilter;
        filters.forEach((chip) => chip.classList.toggle("is-active", chip === button));

        const url = new URL(window.location);
        if (nextFilter === "all") {
          url.searchParams.delete("filter");
        } else {
          url.searchParams.set("filter", nextFilter);
        }
        window.history.pushState({}, "", url);

        applyFilters();
      };

      filters.forEach((button, index) => {
        button.addEventListener("click", () => selectProjectFilter(button));

        button.addEventListener("keydown", (e) => {
          let targetIndex = index;

          switch (e.key) {
            case "ArrowLeft":
              e.preventDefault();
              targetIndex = index > 0 ? index - 1 : filters.length - 1;
              break;
            case "ArrowRight":
              e.preventDefault();
              targetIndex = index < filters.length - 1 ? index + 1 : 0;
              break;
            case "Enter":
            case " ":
              e.preventDefault();
              selectProjectFilter(button);
              return;
            case "Escape":
              e.preventDefault();
              filters[0].focus();
              return;
          }

          if (targetIndex !== index) {
            filters[targetIndex].focus();
          }
        });
      });

      applyFilters();
    }
  </script>
</Base>
