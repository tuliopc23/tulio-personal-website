---
import Base from "../../layouts/Base.astro";
import ArticleCard from "../../components/ArticleCard.astro";
import Breadcrumbs from "../../components/Breadcrumbs.astro";
import CategoryList from "../../components/CategoryList.astro";
import PageIndicator from "../../components/PageIndicator.astro";
import ScrollHint from "../../components/ScrollHint.astro";
import { getAllPosts, type PostSummary } from "../../sanity/lib/posts";

const formatter = new Intl.DateTimeFormat("en", {
  month: "short",
  day: "numeric",
  year: "numeric",
});

const postEntries: Array<
  PostSummary & {
    href: string;
    dateISO: string;
    dateLabel: string;
    readingTimeMinutes: number;
    isNew: boolean;
  }
> = (await getAllPosts()).map((post) => {
  const date = new Date(post.publishedAt);
  const summaryWordCount = post.summary.split(/\s+/).filter(Boolean).length;
  const estimatedReadingTime = Math.max(1, Math.round(summaryWordCount / 170));
  const isNew = Date.now() - date.getTime() < 7 * 24 * 60 * 60 * 1000; // 7 days
  return {
    ...post,
    href: `/blog/${post.slug}/`,
    dateISO: date.toISOString(),
    dateLabel: formatter.format(date),
    readingTimeMinutes: post.readingTimeMinutes ?? estimatedReadingTime,
    isNew,
  };
});

const [featured, ...rest] = postEntries;
const spotlightTags = ["projects", "tools", "open source", "opinion"];
const tagSet = new Set<string>(spotlightTags);

const runtimeOrigin = Astro.url?.origin ?? "https://example.com";
const siteOrigin = Astro.site?.origin ?? runtimeOrigin;
const canonical = new URL("/blog/", siteOrigin).toString();
const pageDescription =
  "Notes on engineering, design rigor, and Apple-inspired interfaces by Tulio Cunha.";
const featuredSocial = featured?.seo?.socialImage?.url
  ? featured.seo.socialImage
  : (featured?.heroImage ?? null);
const ogImage = featuredSocial?.url
  ? {
      url: featuredSocial.url,
      alt: featuredSocial.alt ?? null,
      width: featuredSocial.width,
      height: featuredSocial.height,
    }
  : null;
const _structuredData = {
  "@context": "https://schema.org",
  "@type": "Blog",
  name: "Tulio Cunha Blog",
  description: pageDescription,
  url: canonical,
  inLanguage: "en",
  publisher: {
    "@type": "Organization",
    name: "Tulio Cunha",
    url: siteOrigin,
  },
  sameAs: [
    "https://github.com/tuliopc23",
    "https://linkedin.com/in/tuliocunha",
    "https://instagram.com/tuliopinheirocunha",
  ],
  image: ogImage?.url ? [ogImage.url] : undefined,
};

postEntries.forEach((entry) => {
  entry.tags?.forEach((tag) => {
    if (tag) {
      tagSet.add(tag);
    }
  });
});

const _uniqueTags = Array.from(tagSet).sort((a, b) => a.localeCompare(b));
const _initialDisplayCount = rest.length > 0 ? Math.min(6, rest.length) : 6;
const _placeholders = [
  {
    title: "Fresh case study in flight",
    summary:
      "A new long-form breakdown is on the bench. Watch this space for the release notes and lessons learned.",
    href: "/blog/",
    tags: ["Preview"],
  },
  {
    title: "Tooling notebook",
    summary:
      "Documenting the latest experiments in automation, testing, and performance tuning before they ship here.",
    href: "/blog/",
    tags: ["Preview"],
  },
  {
    title: "Interface theory draft",
    summary:
      "Collecting ideas about haptics, motion, and how hardware influences the feel of software interfaces.",
    href: "/blog/",
    tags: ["Preview"],
  },
];
---

<Base
  title="Blog"
  description={pageDescription}
  canonical={canonical}
  ogDescription={pageDescription}
  ogImage={ogImage}
  structuredData={_structuredData}
  sidebar={true}
>
  <link
    slot="head"
    rel="alternate"
    type="application/rss+xml"
    title="Tulio Cunha — Blog RSS"
    href="/blog/feed.xml"
  />
  <link
    slot="head"
    rel="alternate"
    type="application/atom+xml"
    title="Tulio Cunha — Blog Atom"
    href="/blog/atom.xml"
  />
  <section
    class="container blogHero"
    data-reveal
    data-reveal-type="scale"
    data-reveal-group="blog-hero"
  >
    <Breadcrumbs
      items={[
        { label: "Home", href: "/", icon: "home" },
        { label: "Blog", icon: "book" },
      ]}
    />
    <div class="blogHero__copy">
      <span class="blogHero__eyebrow">Blog</span>
      <h1 class="blogHero__title">
        Thoughts from a curious, passionate developer in a fast-shifting software world.
      </h1>
      <p class="blogHero__lede">
        Essays on the craft of building—from refining open source tools and shipping
        innovative experiences to questioning the habits and opinions that shape modern
        product development.
      </p>
    </div>
    {
      featured ? (
        <div class="blogHero__featured">
          <div class="blogHero__halo" aria-hidden="true" />
          <ArticleCard
            href={featured.href}
            title={featured.title}
            summary={featured.summary}
            dateISO={featured.dateISO}
            dateLabel={featured.dateLabel}
            tags={featured.tags}
            categories={featured.categories}
            readingTimeMinutes={featured.readingTimeMinutes}
            isNew={featured.isNew}
            featured={true}
            revealGroup="blog-hero"
            revealOrder={0}
          />
        </div>
      ) : (
        <div class="blogHero__empty card">
          <h2>No posts yet</h2>
          <p>
            Articles are en route. Subscribe via RSS to be notified as soon as the first
            story lands.
          </p>
        </div>
      )
    }
  </section>

  <section class="container">
    <CategoryList />
  </section>

  {
    featured && rest.length > 0 && (
      <section class="container blogSurface" data-reveal data-reveal-group="blog-list">
        <div class="blogFilters" role="toolbar" aria-label="Filter posts by tag">
          <button
            class="blogFilters__link is-active"
            data-blog-filter="all"
            type="button"
          >
            All articles
          </button>
          {_uniqueTags.map((tag) => {
            const slug = tag.toLowerCase().replace(/\s+/g, "-");
            return (
              <button class="blogFilters__link" data-blog-filter={slug} type="button">
                {tag}
              </button>
            );
          })}
        </div>
        <div
          class="sr-only"
          role="status"
          aria-live="polite"
          aria-atomic="true"
          data-blog-filter-status
        />

        {rest.length > 0 && (
          <div class="blogEmpty" data-blog-empty hidden>
            No articles match this filter yet. Try another tag or check back soon.
          </div>
        )}

        <div class="articleCarousel">
          <ScrollHint target=".articleGrid" variant="all" />
          <ul
            class="articleGrid"
            data-article-list
            data-initial-count={_initialDisplayCount}
          >
            {rest.map((post, index) => (
              <li
                class="articleGrid__item"
                data-article
                data-tags={post.tags
                  .map((tag) => tag.toLowerCase().replace(/\s+/g, "-"))
                  .join(",")}
                data-index={index}
              >
                <ArticleCard
                  href={post.href}
                  title={post.title}
                  summary={post.summary}
                  dateISO={post.dateISO}
                  dateLabel={post.dateLabel}
                  tags={post.tags}
                  categories={post.categories}
                  readingTimeMinutes={post.readingTimeMinutes}
                  isNew={post.isNew}
                  revealGroup="blog-list"
                  revealOrder={index}
                />
              </li>
            ))}
            {_placeholders.map((placeholder) => (
              <li class="articleGrid__item" aria-hidden="true">
                <ArticleCard
                  href={placeholder.href}
                  title={placeholder.title}
                  summary={placeholder.summary}
                  dateISO={new Date().toISOString()}
                  dateLabel="Coming soon"
                  tags={placeholder.tags}
                  featured={false}
                />
              </li>
            ))}
          </ul>
          <PageIndicator
            containerSelector=".articleGrid"
            itemSelector=".articleGrid__item:not([hidden])"
            ariaLabel="Articles navigation"
          />
        </div>

        <div class="blogActions">
          <button class="blogActions__load" data-blog-load-more type="button">
            Load older articles
          </button>
        </div>
      </section>
    )
  }

  <script is:inline>
    const list = document.querySelector("[data-article-list]");
    const filters = Array.from(document.querySelectorAll("[data-blog-filter]"));
    const loadMoreButton = document.querySelector("[data-blog-load-more]");
    const emptyState = document.querySelector("[data-blog-empty]");

    if (list) {
      const cards = Array.from(list.querySelectorAll("[data-article]"));
      const initial = Number(list.dataset.initialCount ?? cards.length);
      let visibleLimit = initial;
      let activeTag = "all";

      const fadeDuration = 200;
      const applyFilters = () => {
        let shown = 0;
        let matches = 0;

        cards.forEach((card) => {
          const tags = (card.dataset.tags ?? "").split(",").filter(Boolean);
          const matchesTag = activeTag === "all" || tags.includes(activeTag);

          if (!matchesTag) {
            if (!card.hidden) {
              card.dataset.state = "hiding";
              setTimeout(() => {
                card.hidden = true;
                card.dataset.state = "filtered";
              }, fadeDuration);
            } else {
              card.hidden = true;
              card.dataset.state = "filtered";
            }
            return;
          }

          matches += 1;

          if (shown < visibleLimit) {
            if (card.hidden) {
              card.hidden = false;
              card.dataset.state = "showing";
              requestAnimationFrame(() => {
                card.dataset.state = "visible";
              });
            } else {
              card.dataset.state = "visible";
            }
            shown += 1;
          } else {
            card.hidden = true;
            card.dataset.state = "hidden";
          }
        });

        const hasHidden = cards.some((card) => card.dataset.state === "hidden");

        if (loadMoreButton) {
          const shouldHide = !hasHidden || matches <= visibleLimit;
          loadMoreButton.hidden = shouldHide;
          loadMoreButton.disabled = shouldHide;
        }

        if (emptyState) {
          emptyState.hidden = matches > 0;
        }

        // Update ARIA live region for screen readers
        const statusEl = document.querySelector("[data-blog-filter-status]");
        if (statusEl) {
          const filterLabel =
            activeTag === "all" ? "all articles" : activeTag.replace(/-/g, " ");
          statusEl.textContent = `Showing ${matches} article${matches === 1 ? "" : "s"} for ${filterLabel}`;
        }
      };

      const resetLimit = () => {
        visibleLimit = initial;
      };

      const selectFilter = (button) => {
        const tag = button.dataset.blogFilter ?? "all";
        if (activeTag === tag) return;
        activeTag = tag;
        resetLimit();
        filters.forEach((chip) => chip.classList.toggle("is-active", chip === button));
        applyFilters();
        list.scrollTo({ left: 0, behavior: "smooth" });
      };

      filters.forEach((button, index) => {
        button.addEventListener("click", () => selectFilter(button));

        // Keyboard navigation
        button.addEventListener("keydown", (e) => {
          let targetIndex = index;

          switch (e.key) {
            case "ArrowLeft":
              e.preventDefault();
              targetIndex = index > 0 ? index - 1 : filters.length - 1;
              break;
            case "ArrowRight":
              e.preventDefault();
              targetIndex = index < filters.length - 1 ? index + 1 : 0;
              break;
            case "Enter":
            case " ":
              e.preventDefault();
              selectFilter(button);
              return;
            case "Escape":
              e.preventDefault();
              filters[0].focus(); // Focus "All" filter
              return;
          }

          if (targetIndex !== index) {
            filters[targetIndex].focus();
          }
        });
      });

      loadMoreButton?.addEventListener("click", () => {
        visibleLimit += initial;
        applyFilters();
      });

      applyFilters();
    }
  </script>
</Base>
