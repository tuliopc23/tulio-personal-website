---
import Base from "../../layouts/Base.astro";
import ArticleCard from "../../components/ArticleCard.astro";
import { getCollection } from "astro:content";

type PostEntry = {
  title: string;
  summary: string;
  href: string;
  tags: string[];
  date: Date;
  dateISO: string;
  dateLabel: string;
};

const entries = await getCollection("blog");
const formatter = new Intl.DateTimeFormat("en", {
  month: "short",
  day: "numeric",
  year: "numeric",
});

const posts: PostEntry[] = entries
  .map((entry) => {
    const tags = Array.isArray(entry.data.tags) ? entry.data.tags : [];
    const date =
      entry.data.date instanceof Date ? entry.data.date : new Date(entry.data.date);
    return {
      title: entry.data.title,
      summary: entry.data.summary,
      href: `/blog/${entry.slug}/`,
      tags,
      date,
      dateISO: date.toISOString(),
      dateLabel: formatter.format(date),
    } satisfies PostEntry;
  })
  .sort((a, b) => b.date.valueOf() - a.date.valueOf());

const [featured, ...rest] = posts;
const spotlightTags = ["projects", "tools", "open source", "opinion"];
const tagSet = new Set(spotlightTags);
const uniqueTags = Array.from(tagSet);
const initialDisplayCount = 6;
const placeholders = [
  {
    title: "Fresh case study in flight",
    summary:
      "A new long-form breakdown is on the bench. Watch this space for the release notes and lessons learned.",
    href: "/blog/",
    tags: ["Preview"],
  },
  {
    title: "Tooling notebook",
    summary:
      "Documenting the latest experiments in automation, testing, and performance tuning before they ship here.",
    href: "/blog/",
    tags: ["Preview"],
  },
  {
    title: "Interface theory draft",
    summary:
      "Collecting ideas about haptics, motion, and how hardware influences the feel of software interfaces.",
    href: "/blog/",
    tags: ["Preview"],
  },
];
---

<Base title="Blog" sidebar={true}>
  <section class="container blogHero">
    <div class="blogHero__copy">
      <span class="blogHero__eyebrow">Blog</span>
      <h1 class="blogHero__title">
        Thoughts from a curious, passionate developer in a fast-shifting software world.
      </h1>
      <p class="blogHero__lede">
        Essays on the craft of buildingâ€”from refining open source tools and shipping
        Apple-inspired experiences to questioning the habits and opinions that shape
        modern product development.
      </p>
    </div>
    {
      featured ? (
        <div class="blogHero__featured">
          <ArticleCard
            href={featured.href}
            title={featured.title}
            summary={featured.summary}
            dateISO={featured.dateISO}
            dateLabel={featured.dateLabel}
            tags={featured.tags}
            featured={true}
          />
        </div>
      ) : (
        <div class="blogHero__empty card">
          <h2>No posts yet</h2>
          <p>
            Articles are en route. Subscribe via RSS to be notified as soon as the first
            story lands.
          </p>
        </div>
      )
    }
  </section>

  {
    featured && rest.length > 0 && (
      <section class="container blogSurface">
        <div class="blogFilters" role="toolbar" aria-label="Filter posts by tag">
          <button
            class="blogFilters__link is-active"
            data-blog-filter="all"
            type="button"
          >
            All articles
          </button>
          {uniqueTags.map((tag) => {
            const slug = tag.toLowerCase().replace(/\s+/g, "-");
            return (
              <button class="blogFilters__link" data-blog-filter={slug} type="button">
                {tag}
              </button>
            );
          })}
        </div>

        {rest.length > 0 && (
          <div class="blogEmpty" data-blog-empty hidden>
            No articles match this filter yet. Try another tag or check back soon.
          </div>
        )}

        <div class="articleCarousel">
          <ul
            class="articleGrid"
            data-article-list
            data-initial-count={initialDisplayCount}
          >
            {rest.map((post, index) => (
              <li
                class="articleGrid__item"
                data-article
                data-tags={post.tags
                  .map((tag) => tag.toLowerCase().replace(/\s+/g, "-"))
                  .join(",")}
                data-index={index}
              >
                <ArticleCard
                  href={post.href}
                  title={post.title}
                  summary={post.summary}
                  dateISO={post.dateISO}
                  dateLabel={post.dateLabel}
                  tags={post.tags}
                />
              </li>
            ))}
            {placeholders.map((placeholder) => (
              <li class="articleGrid__item" aria-hidden="true">
                <ArticleCard
                  href={placeholder.href}
                  title={placeholder.title}
                  summary={placeholder.summary}
                  dateISO={new Date().toISOString()}
                  dateLabel="Coming soon"
                  tags={placeholder.tags}
                  featured={false}
                />
              </li>
            ))}
          </ul>
        </div>

        <div class="blogActions">
          <button class="blogActions__load" data-blog-load-more type="button">
            Load older articles
          </button>
        </div>
      </section>
    )
  }

  <script is:inline>
    const list = document.querySelector("[data-article-list]");
    const filters = Array.from(document.querySelectorAll("[data-blog-filter]"));
    const loadMoreButton = document.querySelector("[data-blog-load-more]");
    const emptyState = document.querySelector("[data-blog-empty]");

    if (list) {
      const cards = Array.from(list.querySelectorAll("[data-article]"));
      const initial = Number(list.dataset.initialCount ?? cards.length);
      let visibleLimit = initial;
      let activeTag = "all";

      const applyFilters = () => {
        let shown = 0;
        let matches = 0;

        cards.forEach((card) => {
          const tags = (card.dataset.tags ?? "").split(",").filter(Boolean);
          const matchesTag = activeTag === "all" || tags.includes(activeTag);

          if (!matchesTag) {
            card.hidden = true;
            card.dataset.state = "filtered";
            return;
          }

          matches += 1;

          if (shown < visibleLimit) {
            card.hidden = false;
            card.dataset.state = "visible";
            shown += 1;
          } else {
            card.hidden = true;
            card.dataset.state = "hidden";
          }
        });

        const hasHidden = cards.some((card) => card.dataset.state === "hidden");

        if (loadMoreButton) {
          const shouldHide = !hasHidden || matches <= visibleLimit;
          loadMoreButton.hidden = shouldHide;
          loadMoreButton.disabled = shouldHide;
        }

        if (emptyState) {
          emptyState.hidden = matches > 0;
        }
      };

      const resetLimit = () => {
        visibleLimit = initial;
      };

      filters.forEach((button) => {
        button.addEventListener("click", () => {
          const tag = button.dataset.blogFilter ?? "all";
          if (activeTag === tag) return;
          activeTag = tag;
          resetLimit();
          filters.forEach((chip) => chip.classList.toggle("is-active", chip === button));
          applyFilters();
          list.scrollTo({ left: 0, behavior: "smooth" });
        });
      });

      loadMoreButton?.addEventListener("click", () => {
        visibleLimit += initial;
        applyFilters();
      });

      applyFilters();
    }
  </script>
</Base>
