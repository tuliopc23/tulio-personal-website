---
import Base from "../../layouts/Base.astro";
import VisualEditing from "../../components/VisualEditing.astro";
import ReadingProgress from "../../components/ReadingProgress.astro";
import Breadcrumbs from "../../components/Breadcrumbs.astro";
import SFIcon from "../../components/SFIcon.astro";
import ArticlePortableText from "../../components/ArticlePortableText.astro";
import ArticleCard from "../../components/ArticleCard.astro";
import { urlFor, generateSrcset } from "../../sanity/lib/image";
import {
  calculateReadingTimeMinutes,
  getAllPostSlugs,
  getPostBySlug,
  getRecentPosts,
  type PostDetail,
  type PostSummary,
} from "../../sanity/lib/posts";

const formatter = new Intl.DateTimeFormat("en", {
  month: "long",
  day: "numeric",
  year: "numeric",
});

export async function getStaticPaths() {
  const slugs = await getAllPostSlugs();
  return slugs.map((slug) => ({ params: { slug } }));
}

const { slug = "" } = Astro.params;
const post: PostDetail | null = await getPostBySlug(slug);

if (!post) {
  Astro.response.status = 404;
}

const _related: PostSummary[] = post ? await getRecentPosts(post.slug, 3) : [];
const _dateISO = post ? new Date(post.publishedAt).toISOString() : "";
const _dateLabel = post ? formatter.format(new Date(post.publishedAt)) : "";
const _readingLabel = post ? `${post.readingTimeMinutes} min read` : "";
const defaultOrigin = Astro.url?.origin ?? "https://example.com";
const siteOrigin = Astro.site?.origin ?? "";
const shareOrigin = siteOrigin || defaultOrigin;
const shareUrl = `${shareOrigin}/blog/${slug}/`;
const _shareText = post ? encodeURIComponent(post.title) : "";
const heroImage = post?.heroImage;
const _tags = post?.tags ?? [];
const seo = post?.seo ?? null;
const baseTitle = post?.title ?? "Article not found";
const seoTitle = seo?.metaTitle ?? baseTitle;
const seoDescription =
  seo?.metaDescription ?? post?.summary ?? "Thoughts and updates from Tulio Cunha.";
const canonical = seo?.canonicalUrl ?? shareUrl;
const _noIndex = Boolean(seo?.noIndex);
const preferredSocialImage = seo?.socialImage?.url ? seo.socialImage : (heroImage ?? null);
// Optimize OG images (1200x630 for optimal social sharing)
const ogImage = preferredSocialImage?.url
  ? {
      url: urlFor(preferredSocialImage.url)
        .width(1200)
        .height(630)
        .fit("crop")
        .auto("format")
        .quality(85)
        .url(),
      alt: preferredSocialImage.alt ?? null,
      width: 1200,
      height: 630,
    }
  : null;
const customJsonLd =
  typeof seo?.jsonLd === "string" && seo.jsonLd.trim().length > 0 ? seo.jsonLd : null;
const articleStructuredData = post
  ? {
      "@context": "https://schema.org",
      "@type": "BlogPosting",
      headline: seoTitle,
      description: seoDescription,
      datePublished: post.publishedAt,
      dateModified: post.publishedAt,
      mainEntityOfPage: {
        "@type": "WebPage",
        "@id": canonical,
      },
      author: {
        "@type": "Person",
        name: post.author?.name ?? "Tulio Cunha",
        url: `${shareOrigin}/`,
      },
      publisher: {
        "@type": "Organization",
        name: "Tulio Cunha",
        url: shareOrigin,
        logo: {
          "@type": "ImageObject",
          url: `${shareOrigin}/terminal-favicon.svg`,
        },
      },
      image: ogImage?.url ? ogImage.url : undefined,
      keywords: post.tags?.join(", "),
      articleSection: post.categories?.[0]?.title,
      wordCount: post.content ? calculateReadingTimeMinutes(post.content) * 225 : undefined,
      inLanguage: "en",
    }
  : null;

const breadcrumbStructuredData = {
  "@context": "https://schema.org",
  "@type": "BreadcrumbList",
  itemListElement: [
    {
      "@type": "ListItem",
      position: 1,
      name: "Home",
      item: shareOrigin,
    },
    {
      "@type": "ListItem",
      position: 2,
      name: "Blog",
      item: `${shareOrigin}/blog/`,
    },
    ...(post.categories?.[0]
      ? [
          {
            "@type": "ListItem",
            position: 3,
            name: post.categories[0].title,
            item: `${shareOrigin}/blog/category/${post.categories[0].slug}/`,
          },
        ]
      : []),
    {
      "@type": "ListItem",
      position: post.categories?.[0] ? 4 : 3,
      name: post.title,
      item: shareUrl,
    },
  ],
};

const _structuredData = customJsonLd ?? [articleStructuredData, breadcrumbStructuredData];
---

<Base
  title={seoTitle}
  description={seoDescription}
  canonical={canonical}
  ogTitle={seoTitle}
  ogDescription={seoDescription}
  ogType="article"
  ogImage={ogImage}
  noIndex={_noIndex}
  structuredData={_structuredData}
  sidebar={true}
>
  <link
    slot="head"
    rel="alternate"
    type="application/rss+xml"
    title="Tulio Cunha — Blog RSS"
    href="/blog/feed.xml"
  />
  <link
    slot="head"
    rel="alternate"
    type="application/atom+xml"
    title="Tulio Cunha — Blog Atom"
    href="/blog/atom.xml"
  />
  <VisualEditing />
  <ReadingProgress />
  <article
    class="container article"
    data-reveal
    data-reveal-type="scale"
    data-reveal-group="post-shell"
  >
    {
      post ? (
        <>
          <Breadcrumbs
            items={[
              { label: "Home", href: "/" },
              { label: "Blog", href: "/blog/" },
              { label: post.title },
            ]}
          />
          <header
            class="article__header"
            data-reveal
            data-reveal-group="post-shell"
            data-reveal-order={0}
          >
            <a class="article__backLink" href="/blog">
              <SFIcon name="arrow-left" size={18} stroke={1.6} />
              <span>Back to articles</span>
            </a>
            <h1 class="article__title">{post.title}</h1>
            {post.summary && <p class="article__summary">{post.summary}</p>}
            {(_dateISO || _readingLabel || post.author) && (
              <div class="article__meta">
                {post.author && (
                  <>
                    <span>By {post.author.name}</span>
                    <span aria-hidden="true">•</span>
                  </>
                )}
                {_dateISO && <time datetime={_dateISO}>{_dateLabel}</time>}
                {(_dateISO || post.author) && _readingLabel && (
                  <span aria-hidden="true">•</span>
                )}
                {_readingLabel && <span>{_readingLabel}</span>}
              </div>
            )}
            {(_tags.length > 0 || (post.categories && post.categories.length > 0)) && (
              <ul class="article__tags">
                {post.categories?.map((category) => (
                  <li class="article__tag article__tag--category">{category.title}</li>
                ))}
                {_tags.map((tag) => (
                  <li class="article__tag">{tag}</li>
                ))}
              </ul>
            )}
          </header>

          {heroImage?.url && (
            <div
              class="article__hero"
              data-reveal
              data-reveal-group="post-shell"
              data-reveal-order={1}
            >
              <img
                src={urlFor(heroImage.url).width(1920).auto("format").quality(85).url()}
                srcset={generateSrcset(heroImage.url, [640, 1024, 1280, 1920, 2560])}
                sizes="(max-width: 768px) 100vw, (max-width: 1280px) 1024px, 1920px"
                alt={heroImage.alt ?? ""}
                loading="eager"
                fetchpriority="high"
                decoding="async"
                width={heroImage.width}
                height={heroImage.width}
                data-image-loading
                onload="this.setAttribute('data-loaded','true')"
              />
            </div>
          )}

          <section
            class="article__body"
            data-reveal
            data-reveal-group="post-shell"
            data-reveal-order={2}
          >
            <ArticlePortableText blocks={post.content} />
          </section>

          <footer class="article__footer" aria-label="Article footer">
            <section data-reveal data-reveal-group="post-shell" data-reveal-order={3}>
              <h2 class="article__relatedTitle">Share</h2>
              <div class="article__meta" role="group" aria-label="Share article">
                <a
                  class="articlePortable__link"
                  href={`https://twitter.com/intent/tweet?url=${encodeURIComponent(shareUrl)}&text=${_shareText}`}
                  target="_blank"
                  rel="noopener noreferrer"
                >
                  Share on X (Twitter)
                </a>
                <a
                  class="articlePortable__link"
                  href={`https://www.linkedin.com/shareArticle?mini=true&url=${encodeURIComponent(shareUrl)}&title=${_shareText}`}
                  target="_blank"
                  rel="noopener noreferrer"
                >
                  Share on LinkedIn
                </a>
              </div>
            </section>

            {_related.length > 0 && (
              <section
                aria-label="Related posts"
                data-reveal
                data-reveal-group="post-shell"
                data-reveal-order={4}
              >
                <h2 class="article__relatedTitle">Related reading</h2>
                <div class="article__relatedGrid">
                  {_related.map((entry, index) => {
                    const relatedISO = new Date(entry.publishedAt).toISOString();
                    const relatedLabel = formatter.format(new Date(entry.publishedAt));
                    return (
                      <ArticleCard
                        href={`/blog/${entry.slug}/`}
                        title={entry.title}
                        summary={entry.summary}
                        dateISO={relatedISO}
                        dateLabel={relatedLabel}
                        tags={entry.tags}
                        categories={entry.categories}
                        revealGroup="related-posts"
                        revealOrder={index}
                      />
                    );
                  })}
                </div>
              </section>
            )}
          </footer>
        </>
      ) : (
        <section class="article__body" data-reveal data-reveal-group="post-shell">
          <h1 class="article__title">Article not found</h1>
          <p class="article__summary">
            The article you’re looking for may have been unpublished or renamed. Return to
            the
            <a class="articlePortable__link" href="/blog">
              {" "}
              blog overview
            </a>{" "}
            to see the latest posts.
          </p>
        </section>
      )
    }
  </article>
</Base>
