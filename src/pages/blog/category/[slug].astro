---
import {
  getAllCategories,
  getCategoryBySlug,
  getPostsByCategory,
  type PostSummary,
} from "../../../sanity/lib/posts";

export async function getStaticPaths() {
  const categories = await getAllCategories();

  return categories.map((category) => ({
    params: { slug: category.slug },
  }));
}

const { slug } = Astro.params;
const category = await getCategoryBySlug(slug!);

if (!category) {
  return Astro.redirect("/404");
}

const posts = await getPostsByCategory(slug!);

const formatter = new Intl.DateTimeFormat("en", {
  month: "short",
  day: "numeric",
  year: "numeric",
});

const _postEntries: Array<
  PostSummary & {
    href: string;
    dateISO: string;
    dateLabel: string;
    readingTimeMinutes: number;
    isNew: boolean;
  }
> = posts.map((post) => {
  const date = new Date(post.publishedAt);
  const summaryWordCount = post.summary.split(/\s+/).filter(Boolean).length;
  const estimatedReadingTime = Math.max(1, Math.round(summaryWordCount / 170));
  const isNew = Date.now() - date.getTime() < 7 * 24 * 60 * 60 * 1000; // 7 days
  return {
    ...post,
    href: `/blog/${post.slug}/`,
    dateISO: date.toISOString(),
    dateLabel: formatter.format(date),
    readingTimeMinutes: post.readingTimeMinutes ?? estimatedReadingTime,
    isNew,
  };
});

const runtimeOrigin = Astro.url?.origin ?? "https://example.com";
const siteOrigin = Astro.site?.origin ?? runtimeOrigin;
const canonical = new URL(`/blog/category/${slug}/`, siteOrigin).toString();
const pageTitle = `${category.title} Articles`;
const pageDescription = category.description || `Articles about ${category.title} by Tulio Cunha`;

const _structuredData = {
  "@context": "https://schema.org",
  "@type": "CollectionPage",
  name: pageTitle,
  description: pageDescription,
  url: canonical,
  inLanguage: "en",
  publisher: {
    "@type": "Organization",
    name: "Tulio Cunha",
    url: siteOrigin,
  },
};
---

<Base
  title={pageTitle}
  description={pageDescription}
  canonical={canonical}
  ogDescription={pageDescription}
  structuredData={structuredData}
  sidebar={true}
>
  <section
    class="container categoryHero"
    data-reveal
    data-reveal-type="scale"
    data-reveal-group="category-hero"
  >
    <div class="categoryHero__breadcrumb">
      <a href="/blog/" class="categoryHero__back">‚Üê Blog</a>
    </div>

    <div class="categoryHero__header">
      <span class="categoryHero__eyebrow">Category</span>
      <h1 class="categoryHero__title">{category.title}</h1>
      {
        category.description && (
          <p class="categoryHero__description">{category.description}</p>
        )
      }
    </div>

    {
      postEntries.length > 0 ? (
        <div class="categoryHero__count">
          {postEntries.length} {postEntries.length === 1 ? "article" : "articles"}
        </div>
      ) : (
        <div class="categoryHero__empty">
          <p>No published articles in this category yet.</p>
        </div>
      )
    }
  </section>

  {
    postEntries.length > 0 && (
      <section
        class="container categorySurface"
        data-reveal
        data-reveal-group="category-list"
      >
        <div class="articleCarousel">
          <ul class="articleGrid">
            {postEntries.map((post, index) => (
              <li class="articleGrid__item">
                <ArticleCard
                  href={post.href}
                  title={post.title}
                  summary={post.summary}
                  dateISO={post.dateISO}
                  dateLabel={post.dateLabel}
                  tags={post.tags}
                  readingTimeMinutes={post.readingTimeMinutes}
                  isNew={post.isNew}
                  revealGroup="category-list"
                  revealOrder={index}
                />
              </li>
            ))}
          </ul>
        </div>
      </section>
    )
  }
</Base>

<style>
  .categoryHero {
    padding-block-start: var(--space-2xl);
    padding-block-end: var(--space-xl);
    display: flex;
    flex-direction: column;
    gap: var(--space-lg);
  }

  .categoryHero__breadcrumb {
    display: flex;
  }

  .categoryHero__back {
    color: var(--accent);
    text-decoration: none;
    font-size: var(--fs--1);
    font-weight: 500;
    transition: color 0.2s;
  }

  .categoryHero__back:hover {
    color: var(--accent-bright);
  }

  .categoryHero__header {
    display: flex;
    flex-direction: column;
    gap: var(--space-sm);
  }

  .categoryHero__eyebrow {
    font-size: var(--fs--1);
    font-weight: 600;
    text-transform: uppercase;
    letter-spacing: 0.05em;
    color: var(--muted);
  }

  .categoryHero__title {
    font-size: var(--fs-4);
    font-weight: 700;
    line-height: 1.1;
    color: var(--text);
  }

  .categoryHero__description {
    font-size: var(--fs-0);
    line-height: 1.6;
    color: var(--text-secondary);
    max-width: 65ch;
  }

  .categoryHero__count {
    font-size: var(--fs--1);
    color: var(--muted);
    font-weight: 500;
  }

  .categoryHero__empty {
    padding: var(--space-lg);
    background: var(--surface);
    border: 1px solid var(--hairline);
    border-radius: var(--radius-lg);
    text-align: center;
  }

  .categoryHero__empty p {
    color: var(--muted);
    font-size: var(--fs-0);
  }

  .categorySurface {
    padding-block-end: var(--space-2xl);
  }

  @media (min-width: 768px) {
    .categoryHero__title {
      font-size: var(--fs-5);
    }

    .categoryHero__description {
      font-size: var(--fs-1);
    }
  }
</style>
